// –§—É–Ω–∫—Ü–∏—ò–∞ –∑–∞ –ø—Ä–∏–∫–∞–∂—É–≤–∞—ö–µ/—Å–∫—Ä–∏–≤–∞—ö–µ –Ω–∞ —á–µ–∫–æ—Ä–∏—Ç–µ (toggle –µ—Ñ–µ–∫—Ç)
function showSteps() {
    let stepsDiv = document.getElementById("steps");
    if (stepsDiv.style.display === "none" || stepsDiv.innerHTML === "") {
        stepsDiv.style.display = "block";
    } else {
        stepsDiv.style.display = "none";
    }
}

function encrypt() {
    // –ó–µ–º–∞—ö–µ –Ω–∞ –≤–Ω–µ—Å–µ–Ω —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –µ –≤–Ω–µ—Å–µ–Ω
    let textInput = document.getElementById("inputText").value;
    if (!textInput || textInput.trim() === "") {
        alert("–í–µ –º–æ–ª–∏–º–µ –≤–Ω–µ—Å–µ—Ç–µ —Ç–µ–∫—Å—Ç!");
        return;
    }
    let text = textInput.toUpperCase().replace(/[^A-Z]/g, "");
    
    // –ó–µ–º–∞—ö–µ –Ω–∞ –≤—Ä–µ–¥–Ω–æ—Å—Ç–∏—Ç–µ –æ–¥ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Å–∏—Ç–µ —Å–µ –≤–Ω–µ—Å–µ–Ω–∏
    let key11 = document.getElementById("key11").value;
    let key12 = document.getElementById("key12").value;
    let key21 = document.getElementById("key21").value;
    let key22 = document.getElementById("key22").value;
    
    if (key11 === "" || key12 === "" || key21 === "" || key22 === "") {
        alert("–í–µ –º–æ–ª–∏–º–µ –≤–Ω–µ—Å–µ—Ç–µ —Å–∏—Ç–µ –≤—Ä–µ–¥–Ω–æ—Å—Ç–∏ –∑–∞ –∫–ª—É—á–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞!");
        return;
    }
    
    let keyMatrix = [
        [parseInt(key11), parseInt(key21)],
        [parseInt(key12), parseInt(key22)]
    ];
     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Ç–µ–∫—Å—Ç–æ—Ç —Å–æ–¥—Ä–∂–∏ –±—Ä–æ—ò–∫–∏
     if (/\d/.test(textInput)) {
        alert("–í–µ –º–æ–ª–∏–º–µ –≤–Ω–µ—Å–µ—Ç–µ —Å–∞–º–æ –±—É–∫–≤–∏, –±—Ä–æ—ò–∫–∏ –Ω–µ —Å–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∏!");
        return;
    }

    // –ê–∫–æ –±—Ä–æ—ò–æ—Ç –Ω–∞ –±—É–∫–≤–∏ –µ –Ω–µ–ø–∞—Ä–µ–Ω, –¥–æ–¥–∞—ò "X"
    if (text.length % 2 !== 0) text += "X";
    
    // –ü—Ä–µ—Ç–≤–æ—Ä–∞—ö–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ—Ç –≤–æ –Ω—É–º–µ—Ä–∏—á–∫–∏ –≤—Ä–µ–¥–Ω–æ—Å—Ç–∏ (A=0, B=1, ‚Ä¶, Z=25)
    let numericText = [];
    for (let i = 0; i < text.length; i++) {
        numericText.push(text.charCodeAt(i) - 65);
    }
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ —á–µ–∫–æ—Ä–∏—Ç–µ –∑–∞ –ø—Ä–µ—Å–º–µ—Ç–∫–∞
    let step1 = "üìå 1. –ö–æ–Ω–≤–µ—Ä–∑–∏—ò–∞ –≤–æ –±—Ä–æ–µ–≤–∏: " + numericText.join(", ");
    let step2 = "üìå 2. –ú–∞—Ç—Ä–∏—Ü–∞ –Ω–∞ –∫–ª—É—á: <br>" +
        `[ ${keyMatrix[0][0]}  ${keyMatrix[0][1]} ]<br>` +
        `[ ${keyMatrix[1][0]}  ${keyMatrix[1][1]} ]`;
    
    let encryptedText = "";
    let newNumbers = [];
    
    // –ú–∞—Ç—Ä–∏—á–Ω–æ –º–Ω–æ–∂–µ—ö–µ –∑–∞ —Å–µ–∫–æ—ò –ø–∞—Ä –æ–¥ –±—Ä–æ–µ–≤–∏
    for (let i = 0; i < numericText.length; i += 2) {
        let x1 = numericText[i];
        let x2 = numericText[i + 1];
        
        // –ü—Ä–µ—Å–º–µ—Ç–∫–∞ —Å–æ —Ñ–æ—Ä–º—É–ª–∞—Ç–∞ ((–∏–∑—Ä–∞–∑ % 26) + 26) % 26 –∑–∞ –¥–∞ —Å–µ –æ—Å–∏–≥—É—Ä–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–∞ –≤—Ä–µ–¥–Ω–æ—Å—Ç
        let y1 = ((keyMatrix[0][0] * x1 + keyMatrix[0][1] * x2) % 26 + 26) % 26;
        let y2 = ((keyMatrix[1][0] * x1 + keyMatrix[1][1] * x2) % 26 + 26) % 26;
        
        newNumbers.push(y1, y2);
        encryptedText += String.fromCharCode(y1 + 65) + String.fromCharCode(y2 + 65);
    }
    
    let step3 = "üìå 3. –ü—Ä–µ—Å–º–µ—Ç–∫–∞ –ø–æ –º–∞—Ç—Ä–∏—á–Ω–æ –º–Ω–æ–∂–µ—ö–µ (mod 26): " + newNumbers.join(", ");
    let step4 = "üìå 4. –ö–æ–Ω–≤–µ—Ä–∑–∏—ò–∞ –Ω–∞–∑–∞–¥ –≤–æ –±—É–∫–≤–∏: " + encryptedText;
    
    // –ü—Ä–∏–∫–∞–∂—É–≤–∞—ö–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–æ—Ç –∏ —á–µ–∫–æ—Ä–∏—Ç–µ
    document.getElementById("result").innerText = encryptedText;
    document.getElementById("step1").innerHTML = step1;
    document.getElementById("step2").innerHTML = step2;
    document.getElementById("step3").innerHTML = step3;
    document.getElementById("step4").innerHTML = step4;
    
    document.getElementById("showStepsBtn").style.display = "inline-block";
    document.getElementById("steps").style.display = "none"; // –ü–æ—á–µ—Ç–Ω–æ —Å–∫—Ä–∏–µ–Ω–æ
}

function modInverse(a, m) {
    // –ù–∞–æ—ì–∞ –º–æ–¥—É–ª–∞—Ä–Ω–∏–æ—Ç –∏–Ω–≤–µ—Ä–∑ –Ω–∞ 'a' –ø–æ –º–æ–¥—É–ª 'm'
    for (let x = 1; x < m; x++) {
        if ((a * x) % m === 1) return x;
    }
    return -1;
}

function decrypt() {
    // –ó–µ–º–∞—ö–µ –Ω–∞ –≤–Ω–µ—Å–µ–Ω —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –µ –≤–Ω–µ—Å–µ–Ω
    let textInput = document.getElementById("inputText").value;
    if (!textInput || textInput.trim() === "") {
        alert("–í–µ –º–æ–ª–∏–º–µ –≤–Ω–µ—Å–µ—Ç–µ —à–∏—Ñ—Ä–∏—Ä–∞–Ω —Ç–µ–∫—Å—Ç!");
        return;
    }
    let text = textInput.toUpperCase().replace(/[^A-Z]/g, "");
    
    // –ó–µ–º–∞—ö–µ –Ω–∞ –≤—Ä–µ–¥–Ω–æ—Å—Ç–∏—Ç–µ –æ–¥ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Å–∏—Ç–µ —Å–µ –≤–Ω–µ—Å–µ–Ω–∏
    let key11 = document.getElementById("key11").value;
    let key12 = document.getElementById("key12").value;
    let key21 = document.getElementById("key21").value;
    let key22 = document.getElementById("key22").value;
    
    if (key11 === "" || key12 === "" || key21 === "" || key22 === "") {
        alert("–í–µ –º–æ–ª–∏–º–µ –≤–Ω–µ—Å–µ—Ç–µ —Å–∏—Ç–µ –≤—Ä–µ–¥–Ω–æ—Å—Ç–∏ –∑–∞ –∫–ª—É—á–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞!");
        return;
    }
    
    let keyMatrix = [
        [parseInt(key11), parseInt(key21)],
        [parseInt(key12), parseInt(key22)]
    ];
    
    // –ü—Ä–µ—Å–º–µ—Ç–∫–∞ –Ω–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç–∞
    let det = (keyMatrix[0][0] * keyMatrix[1][1] - keyMatrix[0][1] * keyMatrix[1][0]) % 26;
    if (det < 0) det += 26;
    
    let detInverse = modInverse(det, 26);
    if (detInverse === -1) {
        alert("–ú–∞—Ç—Ä–∏—Ü–∞—Ç–∞ –Ω–µ–º–∞ –∏–Ω–≤–µ—Ä–∑ –º–æ–¥ 26, –≤–Ω–µ—Å–µ—Ç–µ –¥—Ä—É–≥ –∫–ª—É—á.");
        return;
    }
    
    // –ü—Ä–µ—Å–º–µ—Ç–∫–∞ –Ω–∞ –∏–Ω–≤–µ—Ä–∑–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞
    let inverseMatrix = [
        [ ((keyMatrix[1][1] * detInverse) % 26 + 26) % 26, ((-keyMatrix[0][1] * detInverse) % 26 + 26) % 26 ],
        [ ((-keyMatrix[1][0] * detInverse) % 26 + 26) % 26, ((keyMatrix[0][0] * detInverse) % 26 + 26) % 26 ]
    ];
    
    // –ü—Ä–µ—Ç–≤–æ—Ä–∞—ö–µ –Ω–∞ —à–∏—Ñ—Ä–∏—Ä–∞–Ω–∏–æ—Ç —Ç–µ–∫—Å—Ç –≤–æ –Ω—É–º–µ—Ä–∏—á–∫–∏ –≤—Ä–µ–¥–Ω–æ—Å—Ç–∏
    let numericText = [];
    for (let i = 0; i < text.length; i++) {
        numericText.push(text.charCodeAt(i) - 65);
    }
    
    let decryptedText = "";
    let step1 = "üìå 1. –ö–æ–Ω–≤–µ—Ä–∑–∏—ò–∞ –≤–æ –±—Ä–æ–µ–≤–∏: " + numericText.join(", ");
    
    let step2 = "üìå 2. –ò–Ω–≤–µ—Ä–∑–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ –Ω–∞ –∫–ª—É—á: <br>" +
        `[ ${inverseMatrix[0][0]}  ${inverseMatrix[0][1]} ]<br>` +
        `[ ${inverseMatrix[1][0]}  ${inverseMatrix[1][1]} ]`;
    
    let newNumbers = [];
    for (let i = 0; i < numericText.length; i += 2) {
        let y1 = numericText[i];
        let y2 = numericText[i + 1];
        
        let x1 = ((inverseMatrix[0][0] * y1 + inverseMatrix[0][1] * y2) % 26 + 26) % 26;
        let x2 = ((inverseMatrix[1][0] * y1 + inverseMatrix[1][1] * y2) % 26 + 26) % 26;
        
        newNumbers.push(x1, x2);
        decryptedText += String.fromCharCode(x1 + 65) + String.fromCharCode(x2 + 65);
    }
    
    let step3 = "üìå 3. –ü—Ä–µ—Å–º–µ—Ç–∫–∞ –ø–æ –∏–Ω–≤–µ—Ä–∑–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ (mod 26): " + newNumbers.join(", ");
    let step4 = "üìå 4. –ö–æ–Ω–≤–µ—Ä–∑–∏—ò–∞ –Ω–∞–∑–∞–¥ –≤–æ –±—É–∫–≤–∏: " + decryptedText;
    
    // –ü—Ä–∏–∫–∞–∂—É–≤–∞—ö–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–æ—Ç –∏ —á–µ–∫–æ—Ä–∏—Ç–µ
    document.getElementById("result").innerText = decryptedText;
    document.getElementById("step1").innerHTML = step1;
    document.getElementById("step2").innerHTML = step2;
    document.getElementById("step3").innerHTML = step3;
    document.getElementById("step4").innerHTML = step4;
    
    document.getElementById("showStepsBtn").style.display = "inline-block";
    document.getElementById("steps").style.display = "none"; // –ü–æ—á–µ—Ç–Ω–æ —Å–∫—Ä–∏–µ–Ω–æ
}
